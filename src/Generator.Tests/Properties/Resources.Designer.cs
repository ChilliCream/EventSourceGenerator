//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Thor.Generator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Thor.Generator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Diagnostics.Tracing;
        ///using Thor.Core.Abstractions;
        ///
        ///namespace EventSources
        ///{
        ///    [EventSourceDefinition(Name = &quot;BarEventSource&quot;)]
        ///    public interface IBarEventSource
        ///    {
        ///        [Event(1,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void One(string ex, Guid correlationId, string messageType, string from, string to);
        ///
        ///	[Event(2,
        ///           Level = EventLevel.Ver [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceThatBuilds {
            get {
                return ResourceManager.GetString("EventSourceThatBuilds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using  System.Linq;
        ///using static System.Math;
        ///using Gen = System.Generic;
        ///
        ///namespace EventSources
        ///{
        ///    using System.Text;
        ///    using System.Linq;
        ///    using Tasks = System.Threading.Tasks;
        ///
        ///    [EventSourceDefinition(Name = &quot;FooEventSource&quot;)]
        ///    public interface IFooEventSource
        ///    {
        ///        [Event(1,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void One(Exception ex, Guid c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceWithComplexType {
            get {
                return ResourceManager.GetString("EventSourceWithComplexType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Diagnostics.Tracing;
        ///using Thor.Core.Abstractions;
        ///
        ///namespace EventSources
        ///{
        ///    [EventSourceDefinition(Name = &quot;FooEventSource&quot;)]
        ///    public interface IFooEventSource
        ///    {
        ///        [Event(3,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void Three(Exception ex, Guid correlationId, string messageType, string from, string to);
        ///
        ///	[Event(4,
        ///           Level = EventLeve [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceWithComplexTypeThatBuilds {
            get {
                return ResourceManager.GetString("EventSourceWithComplexTypeThatBuilds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Linq;
        ///using static System.Math;
        ///using Gen = System.Generic;
        ///
        ///namespace EventSources
        ///{
        ///    using System.Text;
        ///    using Tasks System.Threading.Tasks;
        ///
        ///    [EventSourceDefinition(Name = Constants.MessageEventSourceName)]
        ///    public interface IMessageEventSource
        ///    {
        ///        [Event(1,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void MessageSent(Guid messageId, Guid correlationId [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceWithConstant {
            get {
                return ResourceManager.GetString("EventSourceWithConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Linq;
        ///using static System.Math;
        ///using Gen = System.Generic;
        ///
        ///namespace EventSources
        ///{
        ///    using System.Text;
        ///    using Tasks System.Threading.Tasks;
        ///
        ///    [EventSourceDefinition(Name = &quot;Foo&quot;)]
        ///    public interface IMessageEventSource
        ///    {
        ///        [Event(1,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void MessageSent(Guid messageId, Guid correlationId, string messageType, strin [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceWithLiteral {
            get {
                return ResourceManager.GetString("EventSourceWithLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using  System.Linq;
        ///using static System.Math;
        ///using Gen = System.Generic;
        ///
        ///namespace EventSources
        ///{
        ///    using System.Text;
        ///    using System.Linq;
        ///    using Tasks = System.Threading.Tasks;
        ///
        ///    [EventSourceDefinition(Name = &quot;FooEventSource&quot;)]
        ///    public interface IFooEventSource
        ///    {
        ///        [Event(1,
        ///           Level = EventLevel.Verbose,
        ///           Message = &quot;Sent message {correlationId}/{messageType} to {to}.&quot;,
        ///           Version = 1)]
        ///        void One(Guid ex, Guid correl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EventSourceWithTwoMethods {
            get {
                return ResourceManager.GetString("EventSourceWithTwoMethods", resourceCulture);
            }
        }
    }
}
