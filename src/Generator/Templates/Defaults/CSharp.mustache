using System;
using System.Diagnostics.Tracing;
using System.Text;

namespace {{namespace}}
{
{{#attribute}}
    {{#hasProperties}}
    [{{name}}({{#properties}}{{^isFirst}}, {{/isFirst}}{{#hasName}}{{name}} = {{/hasName}}{{value}}{{/properties}})]
    {{/hasProperties}}
    {{^hasProperties}}
    [{{name}}]
    {{/hasProperties}}
{{/attribute}}
    public sealed class {{name}}
        : EventSource
        , {{interfaceName}}
    {
        private {{name}}() { }

        public static readonly {{interfaceName}} Log = new {{name}}();

{{#events}}
        {{#attribute}}
        [{{name}}({{#properties}}{{^isFirst}}, {{/isFirst}}{{#hasName}}{{name}} = {{/hasName}}{{value}}{{/properties}})]
        {{/attribute}}
        public void {{name}}({{#parameters}}{{^isFirst}}, {{/isFirst}}{{type}} {{name}}{{/parameters}})
        {
            if (IsEnabled())
            {
                {{#hasParameters}}
                WriteCore({{id}}{{#parameters}}, {{name}}{{/parameters}}); 
                {{/hasParameters}}
                {{^hasParameters}}
                WriteEvent({{id}});
                {{/hasParameters}}
            }
        }

{{/events}}
{{#writeMethods}}
        [NonEvent]
        private unsafe void WriteCore(int eventId{{#parameters}}, {{type}} {{name}}{{/parameters}})
        {
            if (IsEnabled())
            {
{{#parameters}}
{{#isString}}
                SetToEmptyIfNull(ref {{name}});
{{/isString}}
{{/parameters}}

{{#parameters}}
{{#isString}}
                fixed (char* {{name}}Bytes = {{name}})
                {
{{/isString}}
{{/parameters}}
                const short dataCount = {{totalParameters}};
                EventData* data = stackalloc EventData[dataCount];
{{#parameters}}
{{#isString}}
                data[{{position}}].DataPointer = (IntPtr)({{operator}}{{name}}Bytes);
                data[{{position}}].Size = (({{name}}.Length + 1) * 2);
{{/isString}}
{{^isString}}
                data[{{position}}].DataPointer = (IntPtr)({{operator}}{{name}});
                data[{{position}}].Size = {{size}};
{{/isString}}
{{/parameters}}

                WriteEventCore(eventId, dataCount, data);
{{#parameters}}
{{#isString}}
                }
{{/isString}}
{{/parameters}}
            }
        }

{{/writeMethods}}
{{#hasWriteMethods}}
        [NonEvent]
        private static void SetToEmptyIfNull(ref string value)
        {
            if (value == null)
            {
                value = string.Empty;
            }
        }
{{/hasWriteMethods}}
    }
}
